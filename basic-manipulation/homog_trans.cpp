//USC EE569 Homework-2 Problem-1-(c) by Xuejing Lei//Homographic Transformation and Image Overlay//Email: xjlei1117@gmail.com//Date: February 26, 2017#include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>#include <string.h>using namespace std;int overlay_blend(int top, int base){	double a = 0.0, b = 0.0;	b = top/255.0;	a = base/255.0;	if (base<128) {		return round(255*2*a*b);	} else {		return round(255*(1-2*(1-a)*(1-b)));	}}int homog_trans(char *fn_f, char *fn_t, int SizeC_T, int SizeR_T){	FILE *file, *file1;	int BytesPerPixel = 3;	int SizeC = 972, SizeR = 648;	char *filename = new char[30];	int kint, jint;	double j = 0.0, k = 0.0, deltak = 0.0, deltaj = 0.0;	int top[3];	int Fleft_top_r = 596, Fleft_top_c = 318, Fright_top_r = 426, Fright_top_c = 541, Fleft_bot_r = 612, Fleft_bot_c = 528, Fright_bot_r = 429, Fright_bot_c = 653;	int Tleft_top_r = 1, Tleft_top_c = 1, Tright_top_r = 1, Tright_top_c = SizeC_T-2, Tleft_bot_r = SizeR_T-2, Tleft_bot_c = 1, Tright_bot_r = SizeR_T-2, Tright_bot_c = SizeC_T-2;	double H11, H12, H13, H21, H22, H23, H31, H32;	unsigned char ***ImageData_T = new unsigned char **[SizeR_T]; // embedded image	unsigned char ***ImageData = new unsigned char **[SizeR]; // field image	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_t);	strcat(filename, ".raw");	if (!(file=fopen(filename,"rb"))) {		cout << "Cannot open file: " << filename <<endl;		exit(1);	}	for (int m=0; m<SizeR_T; m++){		ImageData_T[m] = new unsigned char *[SizeC_T];			 	for (int n=0; n<SizeC_T; n++){	 		ImageData_T[m][n] = new unsigned char[BytesPerPixel];	 			 		fread(ImageData_T[m][n], sizeof(unsigned char), BytesPerPixel, file);	 			 			 	}	 }	fclose(file);	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_f);	strcat(filename, ".raw");	if (!(file=fopen(filename,"rb"))) {		cout << "Cannot open file: " << filename <<endl;		exit(1);	}	for (int m=0; m<SizeR; m++){		ImageData[m] = new unsigned char *[SizeC];	 	for (int n=0; n<SizeC; n++){	 		ImageData[m][n] = new unsigned char[BytesPerPixel];	 		fread(ImageData[m][n], sizeof(unsigned char), BytesPerPixel, file);		 	}	 }	fclose(file);	if (SizeR_T == 146) {		H11 = -1.135404; H12 = -0.8627; H13 = 949.723444;		H21 = 1.25666; H22 = -0.096115; H23 = -719.722998;		H31 = -0.0038448; H32 = -0.00007648;	} else if (SizeR_T == 197) {		H11 = -1.5389668; H12 = -1.1703489; H13 = 1288.0793582;		H21 = 1.256664; H22 = -0.0961153; H23 = -719.7222998;		H31 = -0.0038448; H32 = -0.0000765;	}	for (int p=426; p<=612; p++){	 	for (int q=318; q<=653; q++){	 		if (q<=(112.0/3.0*(p-426)+541) && q<=(-125.0/183.0*(p-612)+528) && q>=(105.0/8.0*(p-596)+318) && q>=(-223.0/170.0*(p-426)+541)) {	 			j = (H11*p+H12*q+H13)/(H31*p+H32*q+1);	 			k = (H21*p+H22*q+H23)/(H31*p+H32*q+1);	 			kint = floor(k);	 			jint = floor(j);	 			deltak = k - kint;	 			deltaj = j - jint;	 			for (int m=0; m<BytesPerPixel; m++) {	 					 				top[m] = round((1-deltaj)*(1-deltak)*(double)ImageData_T[jint][kint][m] + deltaj*(1-deltak)*(double)ImageData_T[jint][kint+1][m]	 					+ (1-deltaj)*deltak*(double)ImageData_T[jint+1][kint][m] + deltaj*deltak*(double)ImageData_T[jint+1][kint+1][m]);	 					 			}	 			if (SizeR_T == 146 && top[0]>20) {	 				for (int m=0; m<BytesPerPixel; m++) {	 					ImageData[p][q][m] = overlay_blend(top[m], ImageData[p][q][m]);	 				}	 			} else if (SizeR_T == 197 && top[0]<250 && top[1]<250) {	 				for (int m=0; m<BytesPerPixel; m++) {	 					ImageData[p][q][m] = overlay_blend(top[m], ImageData[p][q][m]);	 				}	 			}	 		}		 				 			 	}	 }	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_f);	strcat(filename, "_");	strcat(filename, fn_t);	strcat(filename, "_trans.raw");	if (!(file1=fopen(filename,"wb"))) {	cout << "Cannot open file: " << filename << endl;		exit(1);	}	for (int p=0; p<SizeR; p++){	 	for (int q=0; q<SizeC; q++){	 		fwrite(ImageData[p][q], sizeof(unsigned char), BytesPerPixel, file1);		}	}	fclose(file1);		for (int i=0; i<SizeR_T; i++) {		for (int j=0; j<SizeC_T; j++) {			delete [] ImageData_T[i][j];		}	}	for (int i=0; i<SizeR; i++) {		for (int j=0; j<SizeC; j++) {			delete [] ImageData[i][j];		}	}	for (int i=0; i<SizeR_T; i++) {		delete [] ImageData_T[i];	}	for (int i=0; i<SizeR; i++) {		delete [] ImageData[i];	}	delete [] ImageData;	delete [] ImageData_T;	delete [] filename;	return 0;}int main(int argc, char *argv[]){	int SizeC_Ta = 350, SizeR_Ta = 146;	int SizeC_Tr = 350, SizeR_Tr = 197;	// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name field tartans trojans" << endl;		return 0;	}	homog_trans(argv[1], argv[2], SizeC_Ta, SizeR_Ta);	homog_trans(argv[1], argv[3], SizeC_Tr, SizeR_Tr);	return 0;}