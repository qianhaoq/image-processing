//EE569 Homework-2 Problem-1-(b) by Xuejing Lei//puzzle matching//Email: xjlei1117@gmail.com//Date: February 26, 2017#include <stdio.h>#include <iostream>#include <stdlib.h>#include <math.h>#include <string.h>using namespace std;int puzzle_matching(char *fn_p, char *fn_h, char *fn_t){	FILE *file, *file1;	int BytesPerPixel = 3;	int SizeC_P = 500, SizeR_P = 500;	int SizeC = 512, SizeR = 512;	char *filename = new char[30];	int kint, jint;	double j = 0.0, k = 0.0, deltak = 0.0, deltaj = 0.0;	int flagh = 0;	int Hleft_top_r = 0, Hleft_top_c = 0, Hright_top_r = 0, Hright_top_c = 0, Hleft_bot_r = 0, Hleft_bot_c = 0, Hright_bot_r = 0, Hright_bot_c = 0;	int Tleft_top_r = 0, Tleft_top_c = 0, Tright_top_r = 0, Tright_top_c = 0, Tleft_bot_r = 0, Tleft_bot_c = 0, Tright_bot_r = 0, Tright_bot_c = 0;	int HHleft_top_r = 0, HHleft_top_c = 0, HHright_top_r = 0, HHright_top_c = 0, HHleft_bot_r = 0, HHleft_bot_c = 0, HHright_bot_r = 0, HHright_bot_c = 0;	int TTleft_top_r = 0, TTleft_top_c = 0, TTright_top_r = 0, TTright_top_c = 0, TTleft_bot_r = 0, TTleft_bot_c = 0, TTright_bot_r = 0, TTright_bot_c = 0;	unsigned char ***ImageData_P = new unsigned char **[SizeR_P]; // piece image	unsigned char ***ImageData_PT = new unsigned char **[SizeR]; // transformed piece image	unsigned char ***ImageData_H = new unsigned char **[SizeR]; // Hillary image	unsigned char ***ImageData_T = new unsigned char **[SizeR]; // Trump image	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_p);	strcat(filename, ".raw");	if (!(file=fopen(filename,"rb"))) {		cout << "Cannot open file: " << filename <<endl;		exit(1);	}	for (int m=0; m<SizeR_P; m++){		ImageData_P[m] = new unsigned char *[SizeC_P];			 	for (int n=0; n<SizeC_P; n++){	 		ImageData_P[m][n] = new unsigned char[BytesPerPixel];	 			 		fread(ImageData_P[m][n], sizeof(unsigned char), BytesPerPixel, file);	 			 			 	}	 }	fclose(file);	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_h);	strcat(filename, ".raw");	if (!(file=fopen(filename,"rb"))) {		cout << "Cannot open file: " << filename <<endl;		exit(1);	}	for (int m=0; m<SizeR; m++){		ImageData_H[m] = new unsigned char *[SizeC];		ImageData_PT[m] = new unsigned char *[SizeC];	 	for (int n=0; n<SizeC; n++){	 		ImageData_H[m][n] = new unsigned char[BytesPerPixel];	 		fread(ImageData_H[m][n], sizeof(unsigned char), BytesPerPixel, file);	 		ImageData_PT[m][n] = new unsigned char[BytesPerPixel];	 		for (int l=0; l<BytesPerPixel; l++) {	 			ImageData_PT[m][n][l] = 255;	 		}	 			 	}	 }	fclose(file);	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_t);	strcat(filename, ".raw");	if (!(file=fopen(filename,"rb"))) {		cout << "Cannot open file: " << filename <<endl;		exit(1);	}	for (int m=0; m<SizeR; m++){		ImageData_T[m] = new unsigned char *[SizeC];	 	for (int n=0; n<SizeC; n++){	 		ImageData_T[m][n] = new unsigned char[BytesPerPixel];	 		fread(ImageData_T[m][n], sizeof(unsigned char), BytesPerPixel, file);	 			 	}	 }	fclose(file);	// find corners of puzzle pieces	for (int m=1; m<SizeR_P-1; m++){	 	for (int n=1; n<SizeC_P-1; n++){	 		if (flagh == 0 && ImageData_P[m][n][0] != 255) {	 			if ((ImageData_P[m-1][n-1][0] == 255)&&(ImageData_P[m-1][n][0] == 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] == 255)&&(ImageData_P[m][n+1][0] != 255)&&	 					(ImageData_P[m+1][n-1][0] != 255)&&(ImageData_P[m+1][n][0] != 255)&&(ImageData_P[m+1][n+1][0] != 255)) {	 				Hleft_top_r = m+1;	 				Hleft_top_c = n+1;	 				cout<<"The left-top corner of Hillary piece is at (j, k) = ("<<Hleft_top_r<<", "<<Hleft_top_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] != 255)&&(ImageData_P[m-1][n][0] == 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] != 255)&&(ImageData_P[m][n+1][0] == 255)&&	 					(ImageData_P[m+1][n-1][0] != 255)&&(ImageData_P[m+1][n][0] == 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Hright_top_r = m+1;	 				Hright_top_c = n-2;	 				cout<<"The right-top corner of Hillary piece is at (j, k) = ("<<Hright_top_r<<", "<<Hright_top_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] == 255)&&(ImageData_P[m-1][n][0] != 255)&&(ImageData_P[m-1][n+1][0] != 255)&&	 					(ImageData_P[m][n-1][0] == 255)&&(ImageData_P[m][n+1][0] != 255)&&	 					(ImageData_P[m+1][n-1][0] == 255)&&(ImageData_P[m+1][n][0] == 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Hleft_bot_r = m-2;	 				Hleft_bot_c = n+2;	 				cout<<"The left-bottom corner of Hillary piece is at (j, k) = ("<<Hleft_bot_r<<", "<<Hleft_bot_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] != 255)&&(ImageData_P[m-1][n][0] != 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] != 255)&&(ImageData_P[m][n+1][0] == 255)&&	 					(ImageData_P[m+1][n-1][0] == 255)&&(ImageData_P[m+1][n][0] == 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Hright_bot_r = m-1;	 				Hright_bot_c = n-1;	 				flagh = 1;	 				cout<<"The right-bottom corner of Hillary piece is at (j, k) = ("<<Hright_bot_r<<", "<<Hright_bot_c<<")"<<endl;	 			}	 		} else if (flagh == 1 && ImageData_P[m][n][0] != 255) {	 			if ((ImageData_P[m-1][n-1][0] == 255)&&(ImageData_P[m-1][n][0] == 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] == 255)&&(ImageData_P[m][n+1][0] != 255)&&	 					(ImageData_P[m+1][n-1][0] == 255)&&(ImageData_P[m+1][n][0] != 255)&&(ImageData_P[m+1][n+1][0] != 255)) {	 				Tright_top_r = m+1;	 				Tright_top_c = n+1;	 				cout<<"The right-top corner of Trump piece is at (j, k) = ("<<Tright_top_r<<", "<<Tright_top_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] == 255)&&(ImageData_P[m-1][n][0] == 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] != 255)&&(ImageData_P[m][n+1][0] == 255)&&	 					(ImageData_P[m+1][n-1][0] != 255)&&(ImageData_P[m+1][n][0] != 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Tright_bot_r = m+1;	 				Tright_bot_c = n-1;	 				cout<<"The right-bottom corner of Trump piece is at (j, k) = ("<<Tright_bot_r<<", "<<Tright_bot_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] == 255)&&(ImageData_P[m-1][n][0] != 255)&&(ImageData_P[m-1][n+1][0] != 255)&&	 					(ImageData_P[m][n-1][0] == 255)&&(ImageData_P[m][n+1][0] != 255)&&	 					(ImageData_P[m+1][n-1][0] == 255)&&(ImageData_P[m+1][n][0] == 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Tleft_top_r = m-2;	 				Tleft_top_c = n+1;	 				cout<<"The left-top corner of Trump piece is at (j, k) = ("<<Tleft_top_r<<", "<<Tleft_top_c<<")"<<endl;	 			} else if ((ImageData_P[m-1][n-1][0] != 255)&&(ImageData_P[m-1][n][0] != 255)&&(ImageData_P[m-1][n+1][0] == 255)&&	 					(ImageData_P[m][n-1][0] != 255)&&(ImageData_P[m][n+1][0] == 255)&&	 					(ImageData_P[m+1][n-1][0] == 255)&&(ImageData_P[m+1][n][0] == 255)&&(ImageData_P[m+1][n+1][0] == 255)) {	 				Tleft_bot_r = m-1;	 				Tleft_bot_c = n-1;	 				cout<<"The left-bottom corner of Trump piece is at (j, k) = ("<<Tleft_bot_r<<", "<<Tleft_bot_c<<")"<<endl;	 			}	 		}	 	}	 }	 // find coordinates of holes	 for (int m=1; m<SizeR-1; m++){	 	for (int n=1; n<SizeC-1; n++){	 		if (ImageData_H[m][n][0] == 255) {	 			if ((ImageData_H[m-1][n-1][0] != 255)&&(ImageData_H[m-1][n][0] != 255)&&(ImageData_H[m][n-1][0] != 255)) {	 				HHleft_top_r = m;	 				HHleft_top_c = n;	 				cout<<"The left-top corner of Hillary hole is at (j, k) = ("<<HHleft_top_r<<", "<<HHleft_top_c<<")"<<endl;	 			} else if ((ImageData_H[m-1][n][0] != 255)&&(ImageData_H[m-1][n+1][0] != 255)&&(ImageData_H[m][n+1][0] != 255)) {	 				HHright_top_r = m;	 				HHright_top_c = n;	 				cout<<"The right-top corner of Hillary hole is at (j, k) = ("<<HHright_top_r<<", "<<HHright_top_c<<")"<<endl;	 			} else if ((ImageData_H[m][n-1][0] != 255)&&(ImageData_H[m+1][n-1][0] != 255)&&(ImageData_H[m+1][n][0] != 255)) {	 				HHleft_bot_r = m;	 				HHleft_bot_c = n;	 				cout<<"The left-bottom corner of Hillary hole is at (j, k) = ("<<HHleft_bot_r<<", "<<HHleft_bot_c<<")"<<endl;	 			} else if ((ImageData_H[m][n+1][0] != 255)&&(ImageData_H[m+1][n][0] != 255)&&(ImageData_H[m+1][n+1][0] != 255)) {	 				HHright_bot_r = m;	 				HHright_bot_c = n;	 				cout<<"The right-bottom corner of Hillary hole is at (j, k) = ("<<HHright_bot_r<<", "<<HHright_bot_c<<")"<<endl;	 			}	 		}	 		if (ImageData_T[m][n][0] == 255) {	 			if ((ImageData_T[m-1][n-1][0] != 255)&&(ImageData_T[m-1][n][0] != 255)&&(ImageData_T[m][n-1][0] != 255)) {	 				TTleft_top_r = m;	 				TTleft_top_c = n;	 				cout<<"The left-top corner of Trump hole is at (j, k) = ("<<TTleft_top_r<<", "<<TTleft_top_c<<")"<<endl;	 			} else if ((ImageData_T[m-1][n][0] != 255)&&(ImageData_T[m-1][n+1][0] != 255)&&(ImageData_T[m][n+1][0] != 255)) {	 				TTright_top_r = m;	 				TTright_top_c = n;	 				cout<<"The right-top corner of Trump hole is at (j, k) = ("<<TTright_top_r<<", "<<TTright_top_c<<")"<<endl; 				 			} else if ((ImageData_T[m][n-1][0] != 255)&&(ImageData_T[m+1][n][0] != 255)&&(ImageData_T[m+1][n-1][0] != 255)) {	 				TTleft_bot_r = m;	 				TTleft_bot_c = n;	 				cout<<"The left-bottom corner of Trump hole is at (j, k) = ("<<TTleft_bot_r<<", "<<TTleft_bot_c<<")"<<endl;	 			} else if ((ImageData_T[m][n+1][0] != 255)&&(ImageData_T[m+1][n][0] != 255)&&(ImageData_T[m+1][n+1][0] != 255)) {	 				TTright_bot_r = m;	 				TTright_bot_c = n;	 				cout<<"The right-bottom corner of Trump hole is at (j, k) = ("<<TTright_bot_r<<", "<<TTright_bot_c<<")"<<endl;	 			}	 		}	 	}	 }	 // hillary image	for (int p=HHleft_top_r; p<=HHleft_bot_r; p++){	 	for (int q=HHleft_top_c; q<=HHright_top_c; q++){	 		j = 1.4343*p+0.3939*q-203.7879;	 		k = -0.3838*p+1.4343*q-99.3232;	 		kint = floor(k);	 		jint = floor(j);	 		deltak = k - kint;	 		deltaj = j - jint;	 		for (int m=0; m<BytesPerPixel; m++) {	 					 			ImageData_H[p][q][m] = round((1-deltaj)*(1-deltak)*(double)ImageData_P[jint][kint][m] + deltaj*(1-deltak)*(double)ImageData_P[jint][kint+1][m]	 				+ (1-deltaj)*deltak*(double)ImageData_P[jint+1][kint][m] + deltaj*deltak*(double)ImageData_P[jint+1][kint+1][m]);	 			ImageData_PT[p][q][m] = ImageData_H[p][q][m];	 		}	 				 				 			 	}	 }	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_h);	strcat(filename, "_matching.raw");	if (!(file1=fopen(filename,"wb"))) {	cout << "Cannot open file: " << filename << endl;		exit(1);	}	for (int p=0; p<SizeR; p++){	 	for (int q=0; q<SizeC; q++){	 		if ((p==HHleft_top_r || p==HHleft_bot_r)&&(q>=HHleft_top_c && q<=HHright_top_c)) {	 			for (int m=0; m<BytesPerPixel; m++) {	 				if (ImageData_H[p][q][m]<((ImageData_H[p-1][q][m]+ImageData_H[p+1][q][m])/2+10))	 					ImageData_H[p][q][m] = round((double)(ImageData_H[p-1][q][m] + ImageData_H[p+1][q][m] + ImageData_H[p][q][m])/3.0);	 				else ImageData_H[p][q][m] = round((double)(ImageData_H[p-1][q][m] + ImageData_H[p+1][q][m])/2.0);	 			}	 		}	 		fwrite(ImageData_H[p][q], sizeof(unsigned char), BytesPerPixel, file1);		}	}	fclose(file1);	// Trump image	for (int p=TTleft_top_r; p<=TTleft_bot_r; p++){	 	for (int q=TTleft_top_c; q<=TTright_top_c; q++){	 		j = -0.0606*p-0.7273*q+501.8485;	 		k = 0.7374*p-0.0606*q+144.8586;	 		kint = floor(k);	 		jint = floor(j);	 		deltak = k - kint;	 		deltaj = j - jint;	 		for (int m=0; m<BytesPerPixel; m++) {	 					 			ImageData_T[p][q][m] = round((1-deltaj)*(1-deltak)*(double)ImageData_P[jint][kint][m] + deltaj*(1-deltak)*(double)ImageData_P[jint][kint+1][m]	 				+ (1-deltaj)*deltak*(double)ImageData_P[jint+1][kint][m] + deltaj*deltak*(double)ImageData_P[jint+1][kint+1][m]);	 			ImageData_PT[p][q][m] = ImageData_T[p][q][m];	 		}	 				 				 			 	}	 }	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_t);	strcat(filename, "_matching.raw");	if (!(file1=fopen(filename,"wb"))) {	cout << "Cannot open file: " << filename << endl;		exit(1);	}	for (int p=0; p<SizeR; p++){	 	for (int q=0; q<SizeC; q++){	 		if ((p==TTleft_top_r || p==TTleft_bot_r)&&(q>=TTleft_top_c && q<=TTright_top_c)) {	 			for (int m=0; m<BytesPerPixel; m++) {]	 				if (ImageData_T[p][q][m]<((ImageData_T[p-1][q][m]+ImageData_T[p+1][q][m])/2+7))	 					ImageData_T[p][q][m] = round((double)(ImageData_T[p-1][q][m] + ImageData_T[p+1][q][m] + ImageData_T[p][q][m])/3.0);	 				else ImageData_T[p][q][m] = round((double)(ImageData_T[p-1][q][m] + ImageData_T[p+1][q][m])/2.0);	 			}	 		}	 		if ((p>=TTleft_top_r && p<=TTleft_bot_r)&&(q==TTleft_top_c || q==TTright_top_c)) {	 			for (int m=0; m<BytesPerPixel; m++) {	 				if (ImageData_T[p][q][m]<((ImageData_T[p][q-1][m]+ImageData_T[p][q+1][m])/2+7))	 					ImageData_T[p][q][m] = round((double)(ImageData_T[p][q+1][m] + ImageData_T[p][q-1][m] + ImageData_T[p][q][m])/3.0);	 				else ImageData_T[p][q][m] = round((double)(ImageData_T[p][q+1][m] + ImageData_T[p][q-1][m])/2.0);	 			}	 		}	 		fwrite(ImageData_T[p][q], sizeof(unsigned char), BytesPerPixel, file1);		}	}	fclose(file1);	memset(filename, 0, sizeof(filename));	strcpy(filename, fn_p);	strcat(filename, "_transformed.raw");	if (!(file1=fopen(filename,"wb"))) {	cout << "Cannot open file: " << filename << endl;		exit(1);	}	for (int p=0; p<SizeR; p++){	 	for (int q=0; q<SizeC; q++){	 		fwrite(ImageData_PT[p][q], sizeof(unsigned char), BytesPerPixel, file1);		}	}	fclose(file1);		for (int i=0; i<SizeR_P; i++) {		for (int j=0; j<SizeC_P; j++) {			delete [] ImageData_P[i][j];		}	}	for (int i=0; i<SizeR; i++) {		for (int j=0; j<SizeC; j++) {			delete [] ImageData_H[i][j];			delete [] ImageData_T[i][j];			delete [] ImageData_PT[i][j];		}	}	for (int i=0; i<SizeR_P; i++) {		delete [] ImageData_P[i];	}	for (int i=0; i<SizeR; i++) {		delete [] ImageData_H[i];		delete [] ImageData_T[i];		delete [] ImageData_PT[i];	}	delete [] ImageData_P;	delete [] ImageData_H;	delete [] ImageData_T;	delete [] ImageData_PT;	delete [] filename;	return 0;}int main(int argc, char *argv[]){		// Check for proper syntax	if (argc < 4){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name piece Hillary Trump" << endl;		return 0;	}	puzzle_matching(argv[1], argv[2], argv[3]);	return 0;}